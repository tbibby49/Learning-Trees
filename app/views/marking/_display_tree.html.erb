<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="tree-id" content="<%= @tree.id %>">
  <title>Display Student Tree Partial</title>
  <style>
    body, html {
      height: 100%;
      margin: 0;
    }

    .container {
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .tree-container {
      position: relative;
      width: 1000px; 
      height: 600px; 
      background-image: url('<%= asset_path("Untitled-4.svg") %>');

      background-size: 215%; 
      background-position: center; 
      background-repeat: no-repeat; 
      display: flex;
      justify-content: center;
      align-items: flex-end; 
      overflow: visible; 
      border: 2px solid #333; 
      box-sizing: border-box; 
    }

    .blossom {
      width: 20px; 
      height: 20px; 
      background-color: transparent;
      border-radius: 50%;
      display: flex;
      border: 4px solid gold;
      color: gold;
      align-items: center;
      justify-content: center;
      position: absolute;
      opacity: .8;
    }

    .blossom.gold {
      border: 8px solid gold;
      background-color: gold
      
    }

    .blossom.glow {
      background-color: gold;
      border: 4px rgba(255, 215, 0, 0.5);  
      box-shadow: 0 0 10px 15px rgba(255, 215, 0, 0.5); 
    }

    .blossom.pulse {
      animation: pulse 1s infinite;
      
    }

    .blossom-tooltip {
      display: none;
      position: absolute;
      background-color: #333;
      color: #fff;
      padding: 5px;
      border-radius: 5px;
      white-space: normal;
      z-index: 999;
      width: 200px;
    }

    .blossom:hover .blossom-tooltip {
      display: block;
    }

    .branch-line {
      stroke: black;
      stroke-opacity: 1;
      stroke-width: 20;
      fill: none;
      stroke-linejoin: round
    }

    .branch-tooltip {
      display: none;
      position: absolute;
      background-color: #333;
      color: #fff;
      padding: 5px;
      border-radius: 5px;
      white-space: nowrap;
      z-index: 10;
    }

    .branch-line:hover + .branch-tooltip {
      display: block;
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.1);
      }
      100% {
        transform: scale(1);
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1><%= @tree.name %></h1>
    <!-- .tree-container where blossoms will be positioned -->
    <div class="tree-container" id="tree-container">
      <svg id="lines-svg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 0;"></svg>
      <% placed_positions = [] %> <!-- Array to keep track of placed blossom positions -->

      <!-- Iterating over branches and their blossoms using Ruby -->
      <% columnZeroBlossoms = @branches.flat_map { |b| b.blossoms }.select { |blossom| blossom.column == 0 } %>
      <% otherBlossoms = @branches.flat_map { |b| b.blossoms }.reject { |blossom| blossom.column == 0 } %>

      <!-- Calculate total width needed for column 0 blossoms -->
      <% totalWidth = columnZeroBlossoms.size * 30 + (columnZeroBlossoms.size - 1) * 3 %> 

      <!-- Position column 0 blossoms centered horizontally -->
      <% columnZeroBlossoms.each_with_index do |blossom, blossom_index| %>
        <% bottom_position = rand(50..60) %>
        <% left_position = (475 - totalWidth / 2) + blossom_index * 33 %> <!-- Centered horizontally within the 1000px container -->
        <% placed_positions << {left: left_position, bottom: bottom_position, blossom: blossom} %>
        <% stage = @blossom_stages[blossom.id] %>
        <% sphere_class = 'blossom' %>
        <% if stage == 'Partially Demonstrated' %>
          <% sphere_class += ' gold' %>
        <% elsif stage == 'Fully Demonstrated' %>
          <% sphere_class += ' glow' %>
        <% end %>
        <div class="<%= sphere_class %>" 
          data-row="<%= blossom.row %>" 
          data-column="<%= blossom.column %>" 
          data-branch-name="<%= blossom.branch.name %>" 
          data-branch-id="<%= blossom.branch.id %>"
          data-blossom-id="<%= blossom.id %>"
          style="bottom: <%= bottom_position %>px; left: <%= left_position %>px;">
          <div class="blossom-tooltip">
            <strong><%= blossom.name %></strong><br>
            <%= blossom.description %>
          </div>
        </div>
      <% end %>

      <!-- Position other blossoms -->
      <% otherBlossoms.each_with_index do |blossom, index| %>
        <% branch_count = @branches.size %> <!-- Number of branches -->
        <% branch_count = 1 if branch_count.zero? %> <!-- Avoid division by zero -->
        <% max_column = otherBlossoms.map(&:column).max || 1 %> <!-- Avoid division by zero -->
        <% row_height = 560 / (max_column + 1) %> <!-- Adjust row height to fit within container -->

        <% bottom_position = row_height * (blossom.column + 1) + rand(-10..10) %>
        
        <% container_width = 900 %> <!-- Adjust based on your actual container width -->
        <% center_x = container_width / 2 %> <!-- Center of the container -->
        
        <!-- Adjust left position to center blossoms -->
        <% total_blossoms = otherBlossoms.size %>
        <% min_spacing = 5 %> <!-- Minimum spacing between blossoms -->
        <% max_spacing = 35 %> <!-- Maximum spacing for larger gaps -->

        <!-- Calculate spacing dynamically based on the container width and number of blossoms -->
        <% spacing = [(container_width / (total_blossoms + 1)), max_spacing].min %>
        <% spacing = [spacing, min_spacing].max %> <!-- Ensure it doesn't go below min_spacing -->

        <!-- Calculate the starting position to center blossoms -->
        <% total_width = (total_blossoms - 1) * spacing %>
        <% start_position = center_x - (total_width / 2) %>

        <% left_position = start_position + (index * spacing) %>
        <!-- Check for overlaps and adjust position -->
        <% loop do %>
          <% overlapping = placed_positions.any? do |pos| %>
            <% (left_position - pos[:left]).abs < 33 && (bottom_position - pos[:bottom]).abs < 33 %>
          <% end %>
          <% break unless overlapping %>
          <% left_position += 33 %> <!-- Adjust position to avoid overlap -->
        <% end %>

        <% placed_positions << {left: left_position, bottom: bottom_position, blossom: blossom} %>
        <% stage = @blossom_stages[blossom.id] %>
        <% sphere_class = 'blossom' %>
        <% if stage == 'Partially Demonstrated' %>
          <% sphere_class += ' gold ' %>
        <% elsif stage == 'Fully Demonstrated' %>
          <% sphere_class += ' glow ' %>
        <% end %>
        <div class="<%= sphere_class %>" 
          data-row="<%= blossom.row %>" 
          data-column="<%= blossom.column %>" 
          data-branch-name="<%= blossom.branch.name %>"
          data-branch-id="<%= blossom.branch.id %>" 
          data-blossom-id="<%= blossom.id %>" 
          style="bottom: <%= bottom_position %>px; left: <%= left_position %>px;">
          <div class="blossom-tooltip">
            <strong><%= blossom.name %></strong><br>
            <%= blossom.description %>
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <!-- Scripts (jQuery) -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script>
    document.addEventListener('turbo:load', () => {
      const blossoms = document.querySelectorAll('.blossom');
      const svg = document.getElementById('lines-svg');

      function drawLines() {
        while (svg.firstChild) {
          svg.removeChild(svg.firstChild);
        }

        blossoms.forEach(blossom => {
          const startRow = parseInt(blossom.getAttribute('data-row'));
          const startColumn = parseInt(blossom.getAttribute('data-column'));
          const startX = blossom.offsetLeft + blossom.offsetWidth / 2;
          const startY = blossom.offsetTop + blossom.offsetHeight / 2;
          const branchName = blossom.getAttribute('data-branch-name');

          let closestEndX = null;
          let closestEndY = null;
          let closestBlossom = null;
          let closestDistance = Infinity;

          blossoms.forEach(otherBlossom => {
            if (blossom === otherBlossom) return;
            if (blossom.getAttribute('data-branch-name') !== otherBlossom.getAttribute('data-branch-name')) return;

            const otherRow = parseInt(otherBlossom.getAttribute('data-row'));
            const otherColumn = parseInt(otherBlossom.getAttribute('data-column'));

            if (otherColumn >= startColumn) return;

            const otherX = otherBlossom.offsetLeft + otherBlossom.offsetWidth / 2;
            const otherY = otherBlossom.offsetTop + otherBlossom.offsetHeight / 2;

            const distance = Math.sqrt(Math.pow(otherX - startX, 2) + Math.pow(otherY - startY, 2));

            if (distance < closestDistance) {
              closestDistance = distance;
              closestEndX = otherX;
              closestEndY = otherY;
              closestBlossom = otherBlossom;
            }
          });

          if (closestEndX !== null && closestEndY !== null) {     

            // Determine if it's a C or S curve
            const isCCurve = Math.random() > 0.5;
            const controlPoint1X = isCCurve ? (startX + closestEndX) / 2 : startX;
            const controlPoint1Y = isCCurve ? startY : (startY + closestEndY) / 2;
            const controlPoint2X = isCCurve ? (startX + closestEndX) / 2 : closestEndX;
            const controlPoint2Y = isCCurve ? closestEndY : (startY + closestEndY) / 2;

            const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            const d = `M ${startX},${startY} C ${controlPoint1X},${controlPoint1Y} ${controlPoint2X},${controlPoint2Y} ${closestEndX},${closestEndY}`;
            path.setAttribute('d', d);
            path.setAttribute('class', 'branch-line');
            path.setAttribute('data-branch-name', branchName);
            svg.appendChild(path);

            const branchTooltip = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            branchTooltip.className = 'branch-tooltip';
            branchTooltip.setAttribute('x', (startX + closestEndX) / 2);
            branchTooltip.setAttribute('y', (startY + closestEndY) / 2);
            branchTooltip.setAttribute('fill', '#fff');
            branchTooltip.setAttribute('font-size', '12');
            branchTooltip.setAttribute('background', '#333');
            branchTooltip.textContent = branchName;
            branchTooltip.style.display = 'none';
            svg.appendChild(branchTooltip);

            path.addEventListener('mouseover', function() {
              branchTooltip.style.display = 'block';
            });

            path.addEventListener('mouseout', function() {
              branchTooltip.style.display = 'none';
            });
          }
        });
      }

      drawLines();
      window.addEventListener('resize', drawLines);
    });
    document.addEventListener('turbo:load', () => {
      const blossoms = document.querySelectorAll('.blossom');
      const treeId = document.querySelector('meta[name="tree-id"]').content; // Get tree ID from meta tag

      blossoms.forEach(blossom => {
        // Add double-click event listener
        blossom.addEventListener('dblclick', function() {
          const branchId = blossom.getAttribute('data-branch-id'); // Get branch ID
          const blossomId = blossom.getAttribute('data-blossom-id'); // Get blossom ID

          // Construct the URL for the show page
          const showUrl = `/trees/${treeId}/branches/${branchId}/blossoms/${blossomId}`;

          // Redirect to the show page for the clicked blossom
          window.location.href = showUrl;
        });
      });
  });
  </script>
</body>
</html>
