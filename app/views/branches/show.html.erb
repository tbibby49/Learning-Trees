<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="tree-id" content="<%= @tree.id %>">
    <meta name="branch-id" content="<%= @branch.id %>">

    <title>Blossom Spheres</title>
   <style>
        .sphere {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            border: 2px solid gold;
            background-color: transparent;
            display: flex;
            align-items: center;
            justify-content: center;
            color: gold;
            font-size: 16px;
            cursor: pointer;
            margin: 10px;
            position: relative;
        }
        .tooltip-inner {
            white-space: nowrap;
        }
        .container {
            display: flex;
            flex-wrap: wrap;
        }
        .card {
            z-index: 9999; /* Ensure the card appears above other elements */
            position: absolute; /* Use absolute positioning */
            width: 16rem;
            display: none;
        }
        .card-title {
            font-weight: bold;
        }

        canvas {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 998;
            pointer-events: none;
        }

        .card.blossom {
            border: none; /* Remove border */
            padding: 0; /* Adjust padding */
            
            /* Any other necessary adjustments */
        }
        .sphere {
          width: 25px;
          height: 25px;
          border-radius: 50%;
          border: 2px solid gold;
          background-color: transparent;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          box-shadow: 0 0 0 2px black;
          position: relative;
          margin-right: 10px;
          z-index: 999;
        }
        
        .context-menu {
          display: none;
          position: absolute;
          z-index: 2000;
          background: white;
          border: 1px solid #ccc;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          padding: 10px;
          list-style: none;
        }
        .context-menu li {
          padding: 8px 12px;
          cursor: pointer;
        }
        .context-menu li:hover {
          background-color: #eee;
        }

       #grid-container {
          display: grid;
          grid-template-columns: repeat(10, 60px);
          grid-template-rows: repeat(10, 60px);
          gap: 5px;
          width: 665px; /* Adjust based on the number of columns and cell width */
          height: 650px; /* Adjust based on the number of rows and cell height */
          overflow: hidden; /* Ensure extra cells are not visible */
        }

         .grid-cell {
            border: 1px solid #000;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 5px;
            box-sizing: border-box;
        }

        .blossom {
            width: 100%;
            height: 100%;
            z-index: 100;
        }

        .extra-box {
            display: none;
        }
      
    </style>
</head>

<body>
  <p style="color: green"><%= notice %></p>
  <div>
    <%= render @branch %>
  </div>

  <!-- Add a form to create a new blossom -->
  <div class="container">
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
      Add a blossom
    </button>
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Add a blossom</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <%= form_with(model: [@tree, @branch, Blossom.new]) do |form| %>
              <div>
                <%= form.label :name %>
                <%= form.text_field :name %>
              </div>
              
              <div>
                <%= form.label :description %>
                <%= form.text_area :description %>
              </div>    
              <%= form.submit "Create Blossom", class: "btn btn-primary" %>
            <% end %>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Display the total number of blossoms -->
  <div class="container text-center mt-4">
    <h4>Total Number of Blossoms: <%= @branch.blossoms.count %></h4>
  </div>
</div>

  <div class="container text-center">
    <!-- Right column for the grid -->
    <div class="col-md-11">
      <div class="container" id="grid-container">
      <canvas id="lineCanvas" width="800" height="600"></canvas>   
        <%= render 'grid' %>
      </div>
    </div>
  </div>    

  <div class="container">
    <p style="color: green"><%= notice %></p>
    <div class="row">
      <!-- Left column for the 'add blossom' link -->
      <div class="col-md-1">
        <strong>Blossoms</strong>
        <div id="blossoms-container" class="mt-4">
          <% @branch.blossoms.each do |blossom| %>
            <div class="card blossom" id="<%= dom_id(blossom) %>" data-row="<%= blossom.row %>" data-column="<%= blossom.column %>">
              <%= render blossom %>
            </div>
          <% end %>
        </div>
      </div>

      <div id="blossom-card" class="card position-absolute" style="width: 18rem; display: none;">
        <div class="card-body">
          <h5 id="card-title" class="card-title"></h5>
          <p id="card-description" class="card-text"></p>
          <p id="card-position" class="card-text"></p>
        </div>
      </div>

<script>
  document.addEventListener('turbo:load', () => {
      const gridContainer = document.getElementById('grid-container');      
      const lineCanvas = document.getElementById('lineCanvas');     
      const lineCtx = lineCanvas.getContext('2d');

      for (let i = 0; i < 10; i++) {
          for (let j = 0; j < 10; j++) {
              const cell = document.createElement('div');
              cell.classList.add('grid-cell');
              cell.setAttribute('id', `cell-${i}-${j}`);
              cell.setAttribute('data-row', i);
              cell.setAttribute('data-column', j);
              cell.addEventListener('dragover', allowDrop);
              cell.addEventListener('drop', drop);
              gridContainer.appendChild(cell);
          }
      }
      // Set up draggable items and place them in the correct cells
      const blossoms = document.querySelectorAll('.blossom');
      blossoms.forEach(blossom => {
          const row = blossom.getAttribute('data-row');
          const column = blossom.getAttribute('data-column');
          const targetCell = document.querySelector(`#cell-${row}-${column}`);
          if (targetCell) {
              targetCell.appendChild(blossom);
          }
          blossom.addEventListener('dragstart', drag);
      });

      // Draw lines after page load
      drawLinesExcept(null, null);

      function allowDrop(event) {
          event.preventDefault();
      }

      function drag(event) {
          console.log('Dragging blossom:', event.target.id);
          event.dataTransfer.setData('text', event.target.id);
      }

      function drop(event) {
          event.preventDefault();
          const data = event.dataTransfer.getData('text');
          const movedBlossom = document.getElementById(data);
          console.log('Blossom:', movedBlossom);

          if (!movedBlossom) {
              console.error('Blossom not found');
              return;
          }

          const targetCell = event.target.classList.contains('grid-cell') ? event.target : event.target.closest('.grid-cell');
          if (!targetCell) {
              console.error('Target cell not found');
              return;
          }

          const sourceCell = movedBlossom.parentElement;
          const sourceRow = movedBlossom.getAttribute('data-row');
          const sourceColumn = movedBlossom.getAttribute('data-column');
          const targetRow = targetCell.getAttribute('data-row');
          const targetColumn = targetCell.getAttribute('data-column');

          // Only allow dropping into empty cells
          if (!targetCell.hasChildNodes()) {
              targetCell.appendChild(movedBlossom);
              movedBlossom.setAttribute('data-row', targetRow);
              movedBlossom.setAttribute('data-column', targetColumn);

              savePositionsToServer();
              drawLinesExcept(sourceRow, sourceColumn);
          } else if (event.target.classList.contains('blossom')) {
              const targetBlossom = event.target;
              const targetBlossomRow = targetBlossom.getAttribute('data-row');
              const targetBlossomColumn = targetBlossom.getAttribute('data-column');

              // Swap positions of the blossoms
              sourceCell.appendChild(targetBlossom);
              targetCell.appendChild(movedBlossom);

              // Update data attributes
              movedBlossom.setAttribute('data-row', targetBlossomRow);
              movedBlossom.setAttribute('data-column', targetBlossomColumn);
              targetBlossom.setAttribute('data-row', sourceRow);
              targetBlossom.setAttribute('data-column', sourceColumn);

              savePositionsToServer();
              drawLinesExcept(sourceRow, sourceColumn);
          }
      }

      function savePositionsToServer() {
          console.log('Saving positions to server');
          const positions = {};
          const gridCells = document.querySelectorAll('.grid-cell');
          gridCells.forEach(cell => {
              const blossom = cell.querySelector('.blossom');
              if (blossom) {
                  const row = cell.getAttribute('data-row');
                  const column = cell.getAttribute('data-column');
                  positions[blossom.id.replace('blossom_', '')] = { row: parseInt(row, 10), column: parseInt(column, 10) };
              }
          });

          const treeId = document.querySelector('meta[name="tree-id"]').getAttribute('content');
          const branchId = document.querySelector('meta[name="branch-id"]').getAttribute('content');

          fetch(`/trees/${treeId}/branches/${branchId}/blossoms/update_positions`, {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
              },
              body: JSON.stringify({ positions: positions })
          }).then(response => {
              if (response.ok) {
                  console.log('Positions updated successfully');
              } else {
                  console.error('Failed to update positions');
              }
          }).catch(error => {
              console.error('Error saving positions:', error);
          });
      }

      function drawLinesExcept(exceptRow, exceptColumn) {
          lineCtx.clearRect(0, 0, lineCanvas.width, lineCanvas.height);
          lineCtx.strokeStyle = 'black';
          lineCtx.lineWidth = 8;

          blossoms.forEach(blossom => {
              const startCell = blossom.parentElement;
              if (!startCell) {
                  console.error('Blossom does not have a parent cell:', blossom);
                  return;
              }

              const startRow = parseInt(blossom.getAttribute('data-row'));
              const startColumn = parseInt(blossom.getAttribute('data-column'));

              if (startRow === parseInt(exceptRow) && startColumn === parseInt(exceptColumn)) {
                  return;
              }

              const startX = startCell.offsetLeft + startCell.offsetWidth / 2;
              const startY = startCell.offsetTop + startCell.offsetHeight / 2;

              let closestEndX = null;
              let closestEndY = null;
              let closestDistance = Infinity;

              blossoms.forEach(otherBlossom => {
                  if (blossom === otherBlossom) return;

                  const otherRow = parseInt(otherBlossom.getAttribute('data-row'));
                  const otherColumn = parseInt(otherBlossom.getAttribute('data-column'));

                  if (otherColumn >= startColumn) return;

                  const otherCell = otherBlossom.parentElement;
                  if (!otherCell) return;

                  const otherX = otherCell.offsetLeft + otherCell.offsetWidth / 2;
                  const otherY = otherCell.offsetTop + otherCell.offsetHeight / 2;

                  const distance = Math.sqrt(Math.pow(otherX - startX, 2) + Math.pow(otherY - startY, 2));

                  if (distance < closestDistance) {
                      closestDistance = distance;
                      closestEndX = otherX;
                      closestEndY = otherY;
                  }
              });

              if (closestEndX !== null && closestEndY !== null) {
                  lineCtx.beginPath();
                  lineCtx.moveTo(startX, startY);
                  lineCtx.lineTo(closestEndX, closestEndY);
                  lineCtx.stroke();
              }
          });

          console.log('Lines drawn except for moved blossom.');
      }
      });

    function showCard(event) {
          const sphere = event.target;
          const card = document.getElementById('blossom-card');

          const name = sphere.getAttribute('data-blossom-name');
          const description = sphere.getAttribute('data-blossom-description');
          const row = sphere.getAttribute('data-blossom-row');
          const column = sphere.getAttribute('data-blossom-column');

          const cardTitle = document.getElementById('card-title');
          const cardDescription = document.getElementById('card-description');
          const cardPosition = document.getElementById('card-position');

          cardTitle.textContent = name;
          cardDescription.textContent = description;

          const rect = sphere.getBoundingClientRect();
          card.style.top = `${rect.top + window.scrollY + sphere.offsetHeight}px`;
          card.style.left = `${rect.left + window.scrollX}px`;
          card.style.display = 'block';
        }

        function hideCard(event) {
          const card = document.getElementById('blossom-card');
          card.style.display = 'none';
        }
</script>

<script>
  document.addEventListener('turbo:load', () => {
      function handleDoubleClick(event) {
          const blossom = event.currentTarget;
          const blossomId = blossom.id.replace('blossom_', '');

          // Retrieve tree and branch IDs from meta tags
          const treeId = document.querySelector('meta[name="tree-id"]').getAttribute('content');
          const branchId = document.querySelector('meta[name="branch-id"]').getAttribute('content');

          // Construct the correct edit path
          const editPath = `/trees/${treeId}/branches/${branchId}/blossoms/${blossomId}/edit`;
          window.location.href = editPath;
        }

        // Add event listeners to blossoms
        document.querySelectorAll('.blossom').forEach(blossom => {
          blossom.addEventListener('dblclick', handleDoubleClick);
        });
  })
  </script>
    
    </div>
  </div>


</body>
</html>

